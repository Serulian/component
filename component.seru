from webidl`github.com/serulian/virtualdom` import Node, Element

from "github.com/serulian/attachment" import Attachment
from "github.com/serulian/virtualdom" import DiffReporter, VirtualNodeWrapper
from "github.com/serulian/virtualdom" import NodeWrapper, ApplyDiff, ComputeDiff, Renderer, Context
from "github.com/serulian/virtualdom" import VirtualNode, Renderable, EventManager, RenderToVirtualNode
from interfaces import DOMAttached, DOMDetached, StatefulComponent, PropsUpdatable

/**
 * componentVirtualNode attaches the VirtualNode generated for a component to the component.
 */
var componentVirtualNode Attachment<VirtualNode> = Attachment<VirtualNode>.Unique('cvn')

/**
 * componentDOMNode attaches the DOM Node generated for a component to the component.
 */
var componentDOMNode Attachment<Node> = Attachment<Node>.Unique('cdn')

/**
 * domNodeComponent attaches the component used to generate a DOM node to the node.
 */
var domNodeComponent Attachment<any> = Attachment<any>.Unique('dnc')

/**
 * componentsContext attaches the context to a component.
 */
var componentsContext Attachment<componentContext> = Attachment<componentContext>.Unique('cc')

/**
 * propsKeyCounter defines a counter for generating unique keys for PropsUpdated component
 * VirtualNodes.
 */
var propsKeyCounter int = 0

/**
 * componentReporter is a VirtualDOM reporter which calls the Detached function
 * on components when they are removed from the DOM.
 */
class componentReporter {
	var eventManager EventManager

	function NodeRemoved(domNode Node) {
		component, _ := domNodeComponent.Get(domNode)
		if component is not null {
			detachEvented, _ := component.(DOMDetached)
			detachEvented?.Detached(domNode)
		}

		this.eventManager.NodeRemoved(domNode)
	}

	function NodeCreated(virtualNode VirtualNode, domNode Node) {
		this.eventManager.NodeCreated(virtualNode, domNode)
	}

	function NodeUpdated(virtualNode VirtualNode, domNode Node) {
		this.eventManager.NodeUpdated(virtualNode, domNode)
	}
}

/**
 * componentContext is a VirtualDOM rendering context which keeps track of the custom
 * renderer for components.
 */
class componentContext {
	var eventManager EventManager
	var renderer Renderer
	var diffReporter DiffReporter

	constructor ForElement(element Element) {
		em := EventManager.ForElement(element)
		return componentContext{
			eventManager: em,
			renderer: componentRenderer.new(),
			diffReporter: componentReporter{eventManager: em},
		}
	}

	function Get<T>(name string) T? { return null }

	property Renderer Renderer? {
		get { return this.renderer }
	}

	property EventManager EventManager {
		get { return this.eventManager }
	}
}

/**
 * componentRenderer is a custom VirtualDOM renderner which handles automatic caching and
 * reuse of PropsUpdatable components.
 */
class componentRenderer {
	function Render(component Renderable, root Renderable, pathUnderRoot string, context Context) VirtualNode {
		propsUpdatable, _ := component.(PropsUpdatable)
		if propsUpdatable is not null {
			// Check the cache. If found, we simply reuse the component.
			cached := Attachment<PropsUpdatable>.Global(`cache-${pathUnderRoot}`).Get(context)
			if cached is not null {
				cached.PropsUpdated(propsUpdatable.Props)
				return componentVirtualNode.Get(cached)!
			}
		}

		var rendered VirtualNode = RenderToVirtualNode(component, context)
		if propsUpdatable is not null {
			// Set a key to ensure that the VirtualNode for the props is always reused,
			// which in turn ensures that the DOM node never changes across diffs.
			rendered = rendered{
				Key: rendered.Key ?? `__component_propsupdated_${propsKeyCounter}`,
			}

			propsKeyCounter = propsKeyCounter + 1
		}

		var requiresCallback bool = false

		attachEvented, _ := component.(DOMAttached)
		if attachEvented is not null {
			requiresCallback = true
		}

		detachEvented, _ := component.(DOMDetached)
		if detachEvented is not null {
			requiresCallback = true
		}

		statefulComponent, _ := component.(StatefulComponent)
		if statefulComponent is not null {
			requiresCallback = true
		}

		if requiresCallback {
			rendered = rendered{
				DOMNodeInserted: context.EventManager.RegisterFunction(function(data any) {
					node := data.(Node)
					attachEvented?.Attached(node)
					componentDOMNode.Set(component, node)
					domNodeComponent.Set(node, component)
				}),
			}
		}

		componentVirtualNode.Set(component, rendered)
		componentsContext.Set(component, context.(componentContext))

		if propsUpdatable is not null {
			Attachment<PropsUpdatable>.Global(`cache-${pathUnderRoot}`).Set(context, propsUpdatable)
		}

		return rendered
	}
}

/**
 * UpdateComponentState updates the state of the given component to that given, rerendering
 * the component and children as necessary.
 */
function UpdateComponentState(component StatefulComponent, newState any) {
	// Call StateUpdated on the component to let it set its internal state.
	component.StateUpdated(newState)

	// Retrieve the existing virtual node, context and DOM node for the component. All must
	// already be set.
	currentVirtualNode := componentVirtualNode.Get(component)!
	context := componentsContext.Get(component)!
	node := componentDOMNode.Get(component)!

	// Render an updated virtual DOM tree for the component, reflecting the updated state.	
	updatedVirtualNode := context.renderer.Render(component, component, '', context)

	// Compute a diff from the existing virtual DOM for the component to the updated DOM
	// and apply it to the DOM node for the component.
	var diff = ComputeDiff(updatedVirtualNode, VirtualNodeWrapper.For(currentVirtualNode))
	ApplyDiff(diff, node, context.diffReporter)

	// Update our reference to the virtual DOM node for the component.
	componentVirtualNode.Set(component, updatedVirtualNode)
}

/**
 * RenderComponent renders the full component into the given element in the DOM tree.
 */
function RenderComponent(component Renderable, parent Element) {
	context := componentContext.ForElement(parent)
	rendered := context.renderer.Render(component, component, '', context)

	parentVNode := VirtualNode{
		TagName: string(parent.tagName),
		Children: []VirtualNode{rendered},
	}

	var diff = ComputeDiff(parentVNode, NodeWrapper.For(parent))
	ApplyDiff(diff, parent, context.diffReporter)
}
